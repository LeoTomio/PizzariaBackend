// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Type {
  ADMIN
  RESTAURANT
  USER
}

enum OrderStatus {
  PREPARING
  DELIVERING
  FINISHED
  CANCELED
}

enum OrderType {
  retirada
  entrega
}

enum PaymentMethod {
  pix
  dinheiro
  cartao
}

model User {
  id         String    @id @default(uuid())
  name       String    @unique
  email      String    @unique
  password   String
  type       Type
  company    Company?  @relation(fields: [company_id], references: [id], onDelete: Cascade)
  company_id String?   @unique
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("users")
}

model Company {
  id               String           @id @default(uuid())
  name             String           @unique
  phone            String?
  address          String?
  withdrawalTime   String?
  deliveryTimeFrom String?
  deliveryTimeTo   String?
  banner           String
  instagram        String?
  facebook         String?
  status           Boolean          @default(false)
  isActive         Boolean          @default(true)
  url              String           @unique
  weekDays         CompanyWeekDay[]
  created_at       DateTime?        @default(now())
  updated_at       DateTime?        @default(now())
  Category         Category[]
  Order            Order[]
  User             User?
  Coupon           Coupon[]

  @@map("company")
}

model CompanyWeekDay {
  id         Int       @id @default(autoincrement())
  workHours  String
  company_id String
  weekday    String
  company    Company   @relation(fields: [company_id], references: [id], onDelete: Cascade)
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@unique([company_id, weekday])
  @@map("company_weekdays")
}

model Category {
  id         String    @id @default(uuid())
  name       String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  company    Company   @relation(fields: [company_id], references: [id])
  company_id String
  products   Product[]

  @@unique([name, company_id])
  @@map("categories")
}

model Product {
  id                String    @id @default(uuid())
  name              String
  price             String
  promotional_price String?
  description       String
  banner            String
  unity             String?
  created_at        DateTime? @default(now())
  updated_at        DateTime? @default(now())

  category          Category            @relation(fields: [category_id], references: [id])
  category_id       String
  Items             Item[]
  ProductAdditional ProductAdditional[]

  @@unique([name, category_id])
  @@map("products")
}

model Order {
  id            String        @id @default(uuid())
  number        Int           @default(autoincrement())
  cpf           String
  name          String
  orderType     OrderType
  status        OrderStatus   @default(PREPARING)
  paymentMethod PaymentMethod
  phone         String
  total         Decimal       @db.Decimal(8, 2)
  transshipment Decimal?      @db.Decimal(8, 2)
  coupon        Coupon?       @relation(fields: [coupon_id], references: [id])
  coupon_id     String?
  created_at    DateTime?     @default(now())
  updated_at    DateTime?     @default(now())
  items         Item[]
  company       Company       @relation(fields: [company_id], references: [id])
  company_id    String

  @@map("orders")
}

model Item {
  id          String    @id @default(uuid())
  quantity    Int
  observation String?
  created_at  DateTime? @default(now())
  updated_at  DateTime? @default(now())

  order          Order            @relation(fields: [order_id], references: [id])
  product        Product          @relation(fields: [product_id], references: [id])
  order_id       String
  product_id     String
  ItemAdditional ItemAdditional[]

  @@map("items")
}

model Coupon {
  id         String    @id @default(uuid())
  code       String
  value      Decimal   @db.Decimal(8, 2)
  isActive   Boolean   @default(true)
  company_id String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  company Company @relation(fields: [company_id], references: [id], onDelete: Cascade)
  Order   Order[]

  @@unique([code, company_id])
  @@map("coupon")
}

model Additional {
  id                String              @id @default(uuid())
  name              String
  created_at        DateTime?           @default(now())
  updated_at        DateTime?           @default(now())
  ProductAdditional ProductAdditional[]
  ItemAdditional    ItemAdditional[]

  @@map("additional")
}

model ProductAdditional {
  id            String     @id @default(uuid())
  product_id    String
  additional_id String
  price         Decimal    @db.Decimal(8, 2)
  product       Product    @relation(fields: [product_id], references: [id], onDelete: Cascade)
  additional    Additional @relation(fields: [additional_id], references: [id])
  created_at    DateTime?  @default(now())
  updated_at    DateTime?  @default(now())

  @@map("product_additional")
}

model ItemAdditional {
  id            String     @id @default(uuid())
  quantity      Int
  additional    Additional @relation(fields: [additional_id], references: [id])
  additional_id String
  Item          Item?      @relation(fields: [item_id], references: [id])
  item_id       String?

  @@map("item_additional")
}

model Address {
  id             String  @id @default(uuid())
  number         Int
  complement     String?
  referencePoint String
  neighborhood   String
  street         String
  city           String
}
